__author__ = 'Austin Havens'
import os
from TestSetGeneration.IPOGenerator import IPOGenerator
from TestSetGeneration.ParameterAssignment import ParameterAssignment

testOutputFileLocation = '../generatedTests.py'
def makeHeader():
    header = ''
    header += 'from plat_sleepy.app_spa.conftest import SleepySpaWrapper\n'
    header += 'from helpers.unitconversions import *\n'
    header += 'import time\n'
    header += 'import pytest\n'
    header += 'pytestmark = pytest.mark.autogenerated\n\n'

    # make the check function
    header +='def check(dut):\n'
    header +='    time.sleep(2)\n'
    header +='    dut._connection.sendQueryCommand("*idn?")\n\n'
    return header

def generateLineFromScpiAssignment(assignment):
    scpiWrite = '    dut._connection.sendWriteCommand('
    command = '"' + assignment.name + ' '
    value = str(assignment.value) + '")\n'
    return scpiWrite + command + value


def generateDocCommentForTest(test):
    docCommentQuotes = "    \"\"\"\n"
    docCommentText = docCommentQuotes
    docCommentText += "    New situations in this test\n"
    for newSituation in test.newSituationsCovered:
        docCommentText += "    "
        for assignment in newSituation.assignments:
            docCommentText +=  str(assignment.name) + ": " + str(assignment.value) + "   "

        docCommentText +='\n'

    docCommentText += docCommentQuotes
    return docCommentText

def generateCodeForTest(test, testIndex):
    testCode = 'def test_' +str(testIndex) + '(dut):\n'
    testCode += generateDocCommentForTest(test)
    for assignment in test.steps:
        testCode += generateLineFromScpiAssignment(assignment)

    # Give some time for sweeps to happen
    testCode += '    check(dut)\n'

    testCode += "\n\n"
    return testCode


def generateTestFile(generator):
    file = open(testOutputFileLocation, 'w')
    file.write(makeHeader())

    testIndex = 0
    for test in generator.tests:
        testIndex += 1
        testCode = generateCodeForTest(test, testIndex)
        file.write(testCode)